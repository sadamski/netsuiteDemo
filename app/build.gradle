/*
 * This file was generated by the Gradle 'init' task -> AT: thanks gradle! 
 * General comments: REQ-006 Gradle used as build system
 *
 * 
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'war'             //add WAR file output during each 'gradle build' execution
    id 'java'            //adds java as a pluging to all sub-projects
    id 'jacoco'          //adds jacoco as a pluging to all sub-projects, used for code coverage

}

repositories {
    //adds the main repositories to fetch depedencies below
    google()
   // jcenter()         //supposedly deplicated -> commenting out
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'
    // JSON file manipulation
    implementation 'com.google.code.gson:gson:2.8.0'
    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.9.0'

}

application {
    // Define the main class path for the application.
    mainClass = 'com.adamtrcka.work.App'
}

//Header information
project.description="DEPENDENCY MANAGER App -> A Java Project example - assignment #1 for training purposes"
project.version = 1.0
project.ext.author = "Adam Trcka" 

//this is a custom task, mainly to show a clean output during the build process
task firstBuildTask {
   println ('******************************************');
   println ('* DEPENDENCY MANAGER App - Welcome       *');
   println ('* Project Header Information             *');
   println ('* This standard gradle build system will *');
   println ('* make a jar, unit tests and coverage.   *');
   println ('******************************************');


   println "Project Name    : " + project.name
   println "Project Descp.  : " + project.description
   println "Project Version : " + project.version
   println "Relative Path   : " + project.path
   println "Absolute Path   : " + project.projectDir
   println "Created by      : " + project.ext.author
   println "Quick Instructions -> to run the program, type 'gradle run --args <JSON filename>.json' "

   }

firstBuildTask.finalizedBy javadoc                              //this ensures the auto generation of the java auto-generated documentation
                                                                //stored in app\build\docs\javadoc

task masterTestReport{
    doLast(){
            println "Module name:" + project.name   
            println "Generating Jacoco Coverage Reports "
            test.finalizedBy jacocoTestReport                   //this line is added (finalizedBy) in case of FAILING tests -> Failing tests can cause compilation fails. Even in case of failures jacoco shall generate a report
            jacocoTestReport.dependsOn.test
            }
}

test.finalizedBy jacocoTestReport                               //forwhatever reason, the Jacoco test report coverage does not autorigger, is does with this command

